//@ts-nocheck
/**
 * CoinGecko API V3
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.0
 *
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("AssetPlatformsApi", () => {
  let instance: api.AssetPlatformsApi
  beforeEach(function() {
    instance = new api.AssetPlatformsApi(config)
  });

  test("assetPlatformsGet", () => {
    return expect(instance.assetPlatformsGet({})).resolves.toBe(null)
  })
})

describe("CategoriesApi", () => {
  let instance: api.CategoriesApi
  beforeEach(function() {
    instance = new api.CategoriesApi(config)
  });

  test("coinsCategoriesGet", () => {
    const order: string = "order_example"
    return expect(instance.coinsCategoriesGet(order, {})).resolves.toBe(null)
  })
  test("coinsCategoriesListGet", () => {
    return expect(instance.coinsCategoriesListGet({})).resolves.toBe(null)
  })
})

describe("CoinsApi", () => {
  let instance: api.CoinsApi
  beforeEach(function() {
    instance = new api.CoinsApi(config)
  });

  test("coinsIdGet", () => {
    const id: string = "id_example"
    const localization: string = "localization_example"
    const tickers: boolean = true
    const marketData: boolean = true
    const communityData: boolean = true
    const developerData: boolean = true
    const sparkline: boolean = true
    return expect(instance.coinsIdGet(id, localization, tickers, marketData, communityData, developerData, sparkline, {})).resolves.toBe(null)
  })
  test("coinsIdHistoryGet", () => {
    const id: string = "id_example"
    const date: string = "date_example"
    const localization: string = "localization_example"
    return expect(instance.coinsIdHistoryGet(id, date, localization, {})).resolves.toBe(null)
  })
  test("coinsIdMarketChartGet", () => {
    const id: string = "id_example"
    const vsCurrency: string = "vsCurrency_example"
    const days: string = "days_example"
    const interval: string = "interval_example"
    return expect(instance.coinsIdMarketChartGet(id, vsCurrency, days, interval, {})).resolves.toBe(null)
  })
  test("coinsIdMarketChartRangeGet", () => {
    const id: string = "id_example"
    const vsCurrency: string = "vsCurrency_example"
    const from: string = "from_example"
    const to: string = "to_example"
    return expect(instance.coinsIdMarketChartRangeGet(id, vsCurrency, from, to, {})).resolves.toBe(null)
  })
  test("coinsIdOhlcGet", () => {
    const id: string = "id_example"
    const vsCurrency: string = "vsCurrency_example"
    const days: string = "days_example"
    return expect(instance.coinsIdOhlcGet(id, vsCurrency, days, {})).resolves.toBe(null)
  })
  test("coinsIdTickersGet", () => {
    const id: string = "id_example"
    const exchangeIds: string = "exchangeIds_example"
    const includeExchangeLogo: string = "includeExchangeLogo_example"
    const page: number = 56
    const order: string = "order_example"
    const depth: string = "depth_example"
    return expect(instance.coinsIdTickersGet(id, exchangeIds, includeExchangeLogo, page, order, depth, {})).resolves.toBe(null)
  })
  test("coinsListGet", () => {
    const includePlatform: boolean = true
    return expect(instance.coinsListGet(includePlatform, {})).resolves.toBe(null)
  })
  test("coinsMarketsGet", () => {
    const vsCurrency: string = "vsCurrency_example"
    const ids: string = "ids_example"
    const category: string = "category_example"
    const order: string = "order_example"
    const perPage: number = 56
    const page: number = 56
    const sparkline: boolean = true
    const priceChangePercentage: string = "priceChangePercentage_example"
    return expect(instance.coinsMarketsGet(vsCurrency, ids, category, order, perPage, page, sparkline, priceChangePercentage, {})).resolves.toBe(null)
  })
})

describe("CompaniesBetaApi", () => {
  let instance: api.CompaniesBetaApi
  beforeEach(function() {
    instance = new api.CompaniesBetaApi(config)
  });

  test("companiesPublicTreasuryCoinIdGet", () => {
    const coinId: string = "coinId_example"
    return expect(instance.companiesPublicTreasuryCoinIdGet(coinId, {})).resolves.toBe(null)
  })
})

describe("ContractApi", () => {
  let instance: api.ContractApi
  beforeEach(function() {
    instance = new api.ContractApi(config)
  });

  test("coinsIdContractContractAddressGet", () => {
    const id: string = "id_example"
    const contractAddress: string = "contractAddress_example"
    return expect(instance.coinsIdContractContractAddressGet(id, contractAddress, {})).resolves.toBe(null)
  })
  test("coinsIdContractContractAddressMarketChartGet", () => {
    const id: string = "id_example"
    const contractAddress: string = "contractAddress_example"
    const vsCurrency: string = "vsCurrency_example"
    const days: string = "days_example"
    return expect(instance.coinsIdContractContractAddressMarketChartGet(id, contractAddress, vsCurrency, days, {})).resolves.toBe(null)
  })
  test("coinsIdContractContractAddressMarketChartRangeGet", () => {
    const id: string = "id_example"
    const contractAddress: string = "contractAddress_example"
    const vsCurrency: string = "vsCurrency_example"
    const from: string = "from_example"
    const to: string = "to_example"
    return expect(instance.coinsIdContractContractAddressMarketChartRangeGet(id, contractAddress, vsCurrency, from, to, {})).resolves.toBe(null)
  })
})

describe("DerivativesApi", () => {
  let instance: api.DerivativesApi
  beforeEach(function() {
    instance = new api.DerivativesApi(config)
  });

  test("derivativesExchangesGet", () => {
    const order: string = "order_example"
    const perPage: number = 56
    const page: number = 56
    return expect(instance.derivativesExchangesGet(order, perPage, page, {})).resolves.toBe(null)
  })
  test("derivativesExchangesIdGet", () => {
    const id: string = "id_example"
    const includeTickers: string = "includeTickers_example"
    return expect(instance.derivativesExchangesIdGet(id, includeTickers, {})).resolves.toBe(null)
  })
  test("derivativesExchangesListGet", () => {
    return expect(instance.derivativesExchangesListGet({})).resolves.toBe(null)
  })
  test("derivativesGet", () => {
    const includeTickers: string = "includeTickers_example"
    return expect(instance.derivativesGet(includeTickers, {})).resolves.toBe(null)
  })
})

describe("ExchangeRatesApi", () => {
  let instance: api.ExchangeRatesApi
  beforeEach(function() {
    instance = new api.ExchangeRatesApi(config)
  });

  test("exchangeRatesGet", () => {
    return expect(instance.exchangeRatesGet({})).resolves.toBe(null)
  })
})

describe("ExchangesApi", () => {
  let instance: api.ExchangesApi
  beforeEach(function() {
    instance = new api.ExchangesApi(config)
  });

  test("exchangesGet", () => {
    const perPage: number = 56
    const page: string = "page_example"
    return expect(instance.exchangesGet(perPage, page, {})).resolves.toBe(null)
  })
  test("exchangesIdGet", () => {
    const id: string = "id_example"
    return expect(instance.exchangesIdGet(id, {})).resolves.toBe(null)
  })
  test("exchangesIdTickersGet", () => {
    const id: string = "id_example"
    const coinIds: string = "coinIds_example"
    const includeExchangeLogo: string = "includeExchangeLogo_example"
    const page: number = 56
    const depth: string = "depth_example"
    const order: string = "order_example"
    return expect(instance.exchangesIdTickersGet(id, coinIds, includeExchangeLogo, page, depth, order, {})).resolves.toBe(null)
  })
  test("exchangesIdVolumeChartGet", () => {
    const id: string = "id_example"
    const days: number = 56
    return expect(instance.exchangesIdVolumeChartGet(id, days, {})).resolves.toBe(null)
  })
  test("exchangesListGet", () => {
    return expect(instance.exchangesListGet({})).resolves.toBe(null)
  })
})

describe("GlobalApi", () => {
  let instance: api.GlobalApi
  beforeEach(function() {
    instance = new api.GlobalApi(config)
  });

  test("globalDecentralizedFinanceDefiGet", () => {
    return expect(instance.globalDecentralizedFinanceDefiGet({})).resolves.toBe(null)
  })
  test("globalGet", () => {
    return expect(instance.globalGet({})).resolves.toBe(null)
  })
})

describe("IndexesApi", () => {
  let instance: api.IndexesApi
  beforeEach(function() {
    instance = new api.IndexesApi(config)
  });

  test("indexesGet", () => {
    const perPage: number = 56
    const page: number = 56
    return expect(instance.indexesGet(perPage, page, {})).resolves.toBe(null)
  })
  test("indexesListGet", () => {
    return expect(instance.indexesListGet({})).resolves.toBe(null)
  })
  test("indexesMarketIdIdGet", () => {
    const marketId: string = "marketId_example"
    const id: string = "id_example"
    return expect(instance.indexesMarketIdIdGet(marketId, id, {})).resolves.toBe(null)
  })
})

describe("PingApi", () => {
  let instance: api.PingApi
  beforeEach(function() {
    instance = new api.PingApi(config)
  });

  test("pingGet", () => {
    return expect(instance.pingGet({})).resolves.toBe(null)
  })
})

describe("SearchApi", () => {
  let instance: api.SearchApi
  beforeEach(function() {
    instance = new api.SearchApi(config)
  });

  test("searchGet", () => {
    const query: string = "query_example"
    return expect(instance.searchGet(query, {})).resolves.toBe(null)
  })
})

describe("SimpleApi", () => {
  let instance: api.SimpleApi
  beforeEach(function() {
    instance = new api.SimpleApi(config)
  });

  test("simplePriceGet", () => {
    const ids: string = "ids_example"
    const vsCurrencies: string = "vsCurrencies_example"
    const includeMarketCap: string = "includeMarketCap_example"
    const include24hrVol: string = "include24hrVol_example"
    const include24hrChange: string = "include24hrChange_example"
    const includeLastUpdatedAt: string = "includeLastUpdatedAt_example"
    return expect(instance.simplePriceGet(ids, vsCurrencies, includeMarketCap, include24hrVol, include24hrChange, includeLastUpdatedAt, {})).resolves.toBe(null)
  })
  test("simpleSupportedVsCurrenciesGet", () => {
    return expect(instance.simpleSupportedVsCurrenciesGet({})).resolves.toBe(null)
  })
  test("simpleTokenPriceIdGet", () => {
    const id: string = "id_example"
    const contractAddresses: string = "contractAddresses_example"
    const vsCurrencies: string = "vsCurrencies_example"
    const includeMarketCap: string = "includeMarketCap_example"
    const include24hrVol: string = "include24hrVol_example"
    const include24hrChange: string = "include24hrChange_example"
    const includeLastUpdatedAt: string = "includeLastUpdatedAt_example"
    return expect(instance.simpleTokenPriceIdGet(id, contractAddresses, vsCurrencies, includeMarketCap, include24hrVol, include24hrChange, includeLastUpdatedAt, {})).resolves.toBe(null)
  })
})

describe("TrendingApi", () => {
  let instance: api.TrendingApi
  beforeEach(function() {
    instance = new api.TrendingApi(config)
  });

  test("searchTrendingGet", () => {
    return expect(instance.searchTrendingGet({})).resolves.toBe(null)
  })
})

